{"version":3,"file":"index.mjs","sources":["../../server/src/constants/index.ts","../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/register.ts","../../server/src/config/index.ts","../../server/src/content-types/mux-asset/index.ts","../../server/src/content-types/mux-text-track/index.ts","../../server/src/content-types/index.ts","../../server/src/utils/types.ts","../../server/src/utils/resolve-mux-asset.ts","../../server/src/utils/config.ts","../../server/src/utils/index.ts","../../types/shared-types.ts","../../server/src/utils/text-tracks.ts","../../server/src/controllers/mux-asset.ts","../../server/src/utils/parse-json-body.ts","../../server/src/controllers/mux.ts","../../server/src/controllers/mux-settings.ts","../../server/src/controllers/index.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/client.ts","../../server/src/routes/index.ts","../../server/src/services/mux.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["export const PLUGIN_NAME = 'mux-video-uploader';\nexport const CONFIG_NAME = 'mux';\n","import type { Core } from '@strapi/strapi';\n\nimport { PLUGIN_NAME } from './constants/index';\n\nconst bootstrap = async ({ strapi }: { strapi: Core.Strapi }) => {\n  // @ts-ignore - No types for global strapi variable\n  if (Object.keys(strapi.plugins).indexOf('users-permissions') === -1) {\n    throw new Error('The users-permissions plugin is required in order to use the Mux Video Uploader');\n  }\n\n  const actions = [\n    // App\n    {\n      section: 'plugins',\n      displayName: 'Read',\n      uid: 'read',\n      pluginName: PLUGIN_NAME,\n    },\n    {\n      section: 'plugins',\n      displayName: 'Create',\n      uid: 'create',\n      pluginName: PLUGIN_NAME,\n    },\n    {\n      section: 'plugins',\n      displayName: 'Update',\n      uid: 'update',\n      pluginName: PLUGIN_NAME,\n    },\n    {\n      section: 'plugins',\n      displayName: 'Delete',\n      uid: 'delete',\n      pluginName: PLUGIN_NAME,\n    },\n    // Settings\n    {\n      section: 'plugins',\n      displayName: 'Read',\n      subCategory: 'settings',\n      uid: 'settings.read',\n      pluginName: PLUGIN_NAME,\n    },\n    {\n      section: 'plugins',\n      displayName: 'Update',\n      subCategory: 'settings',\n      uid: 'settings.update',\n      pluginName: PLUGIN_NAME,\n    },\n  ];\n\n  // Commented out as this was causing issues in clustered instances of Strapi\n  // Issue was due to multiple instances of the plugin stampeding Mux's API\n  // rate limits.  Future work would include a manual invocation from the\n  // plugin's settings page.\n  // sync();\n\n  await strapi.admin.services.permission.actionProvider.registerMany(actions);\n};\n\nexport default bootstrap;\n","import type { Core } from '@strapi/strapi';\n\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","import type { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  // register phase\n};\n\nexport default register;\n","import { Config } from '../utils/config';\n\nexport default {\n  default: {\n    accessTokenId: '',\n    secretKey: '',\n    webhookSigningSecret: '',\n    playbackSigningId: '',\n    playbackSigningSecret: '',\n  },\n  validator(config: Config) {\n    const missingConfigs = [];\n\n    if (!config.accessTokenId) {\n      missingConfigs.push('accessTokenId');\n    }\n\n    if (!config.secretKey) {\n      missingConfigs.push('secretKey');\n    }\n\n    if (missingConfigs.length > 0) {\n      throw new Error(\n        `Please remember to set up the file based config for your plugin.  Refer to the \"Configuration\" of the README for this plugin for additional details.  Configs missing: ${missingConfigs.join(', ')}`\n      );\n    }\n  },\n};\n","export default {\n  kind: 'collectionType',\n  collectionName: 'muxassets',\n  info: {\n    description: 'Represents a Mux Asset item, including upload and playback details',\n    displayName: 'Mux Asset',\n    singularName: 'mux-asset',\n    pluralName: 'mux-assets',\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: true,\n    },\n    'content-type-builder': {\n      visible: true,\n    },\n  },\n  options: {\n    draftAndPublish: false,\n  },\n  attributes: {\n    title: {\n      type: 'string',\n      private: false,\n      required: true,\n      maxLength: 255,\n      minLength: 3,\n      configurable: true,\n    },\n    upload_id: {\n      type: 'string',\n      required: false,\n      maxLength: 255,\n    },\n    asset_id: {\n      type: 'string',\n      required: false,\n      maxLength: 255,\n    },\n    playback_id: {\n      type: 'string',\n      required: false,\n      maxLength: 255,\n    },\n    signed: {\n      type: 'boolean',\n      default: false,\n      required: true,\n    },\n    error_message: {\n      type: 'string',\n      required: false,\n      maxLength: 255,\n    },\n    isReady: {\n      type: 'boolean',\n      default: false,\n      required: false,\n    },\n    duration: {\n      type: 'decimal',\n      required: false,\n    },\n    aspect_ratio: {\n      type: 'string',\n      required: false,\n    },\n    asset_data: {\n      type: 'json',\n    },\n  },\n};\n","export default {\n  kind: 'collectionType',\n  collectionName: 'muxtexttracks',\n  info: {\n    description: 'Temporary storage for user-defined subtitles & captions sent to Mux during video uploads',\n    displayName: 'Mux Text Track',\n    singularName: 'mux-text-track',\n    pluralName: 'mux-text-tracks',\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  options: {\n    draftAndPublish: false,\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      private: false,\n      required: true,\n    },\n    language_code: {\n      type: 'string',\n      private: false,\n      required: true,\n    },\n    closed_captions: {\n      type: 'boolean',\n      private: false,\n      required: true,\n    },\n    file: {\n      type: 'json',\n      private: false,\n      required: true,\n    },\n  },\n};\n","import muxAsset from './mux-asset';\nimport muxTextTrack from './mux-text-track';\n\nexport default {\n  'mux-asset': { schema: muxAsset },\n  'mux-text-track': { schema: muxTextTrack },\n};\n","import { MuxService } from '../services/mux';\nimport { PLUGIN_NAME } from '../constants';\n\nconst pluginId = PLUGIN_NAME;\n\nexport type ServiceName = 'mux';\n\nexport type ServiceType<T> = T extends 'mux' ? MuxService : never;\n\nexport const ASSET_MODEL = `plugin::${pluginId}.mux-asset` as const;\nexport const TEXT_TRACK_MODEL = `plugin::${pluginId}.mux-text-track` as const;\n","import { MuxAsset } from '../content-types/mux-asset/types';\nimport { ASSET_MODEL } from './types';\n\nexport const resolveMuxAsset = async (filters: MuxAssetFilter): Promise<MuxAsset> => {\n  // const muxAssets = await strapi.documents(ASSET_MODEL).findMany({\n  //   filters: filters as any\n  // });\n\n  const muxAssets = await strapi.db.query(ASSET_MODEL).findMany({\n    filters,\n  });\n\n  const asset = muxAssets ? (Array.isArray(muxAssets) ? muxAssets[0] : muxAssets) : undefined;\n\n  if (!asset) throw new Error('Unable to resolve mux-asset');\n\n  return asset;\n};\n\nexport interface MuxAssetFilter {\n  upload_id?: string;\n  asset_id?: string;\n  documentId?: string;\n  id?: string;\n}\n","import { PLUGIN_NAME } from '../constants';\n\nexport interface Config {\n  accessTokenId?: string;\n  secretKey?: string;\n  webhookSigningSecret?: string;\n  playbackSigningId?: string;\n  playbackSigningSecret?: string;\n}\n\ntype GetConfigFunction = () => Promise<Config>;\n\nconst getConfig: GetConfigFunction = async () => await strapi.config.get(`plugin::${PLUGIN_NAME}`);\n\nexport { getConfig };\n","import { PLUGIN_NAME } from '../constants';\nimport * as Config from './config';\nimport { ServiceName, ServiceType } from './types';\n\nconst getService = <T extends ServiceName>(name: ServiceName): ServiceType<T> => {\n  return strapi.plugin(PLUGIN_NAME).service(name);\n};\n\nexport { getService, Config };\n","import type Mux from '@mux/mux-node';\nimport { z } from 'zod';\nimport { storedTextTrackToMuxTrack } from '../server/src/utils/text-tracks';\n\nexport const SUPPORTED_MUX_LANGUAGES = [\n  { label: 'English', code: 'en', state: 'Stable' },\n  { label: 'Spanish', code: 'es', state: 'Stable' },\n  { label: 'Italian', code: 'it', state: 'Stable' },\n  { label: 'Portuguese', code: 'pt', state: 'Stable' },\n  { label: 'German', code: 'de', state: 'Stable' },\n  { label: 'French', code: 'fr', state: 'Stable' },\n  { label: 'Polish', code: 'pl', state: 'Beta' },\n  { label: 'Russian', code: 'ru', state: 'Beta' },\n  { label: 'Dutch', code: 'nl', state: 'Beta' },\n  { label: 'Catalan', code: 'ca', state: 'Beta' },\n  { label: 'Turkish', code: 'tr', state: 'Beta' },\n  { label: 'Swedish', code: 'sv', state: 'Beta' },\n  { label: 'Ukrainian', code: 'uk', state: 'Beta' },\n  { label: 'Norwegian', code: 'no', state: 'Beta' },\n  { label: 'Finnish', code: 'fi', state: 'Beta' },\n  { label: 'Slovak', code: 'sk', state: 'Beta' },\n  { label: 'Greek', code: 'el', state: 'Beta' },\n  { label: 'Czech', code: 'cs', state: 'Beta' },\n  { label: 'Croatian', code: 'hr', state: 'Beta' },\n  { label: 'Danish', code: 'da', state: 'Beta' },\n  { label: 'Romanian', code: 'ro', state: 'Beta' },\n  { label: 'Bulgarian', code: 'bg', state: 'Beta' },\n] as const;\n\nconst SUPPORTED_MUX_LANGUAGES_VALUES = SUPPORTED_MUX_LANGUAGES.map((l) => l.code);\n\nexport type SupportedMuxLanguage = (typeof SUPPORTED_MUX_LANGUAGES_VALUES)[number];\n\n/** .srt or .vtt file uploaded as subtitle/caption for a video */\nexport const TextTrackFile = z.object({\n  contents: z.string(),\n  type: z.string(),\n  name: z.string(),\n  size: z.number(),\n});\n\n/** Subtitles and captions uploaded by the user */\nexport const CustomTextTrack = z.object({\n  file: TextTrackFile,\n  name: z.string(),\n  language_code: z.string(),\n  closed_captions: z.boolean().default(false),\n  stored_track: z.custom<Mux.Video.Track>((value) => typeof value === 'object' && value && 'id' in value).optional(),\n});\n\nexport type ParsedCustomTextTrack = z.infer<typeof CustomTextTrack>;\n\nexport type StoredTextTrack = ParsedCustomTextTrack & { id: string };\n\nexport const UploadConfig = z\n  .object({\n    /**\n     * Enable static renditions by setting this to 'standard'. Can be overwritten on a per-asset basis.\n     * @see {@link https://docs.mux.com/guides/video/enable-static-mp4-renditions#why-enable-mp4-support}\n     * @defaultValue 'none'\n     */\n    mp4_support: z.enum(['none', 'standard']).default('none'),\n\n    /**\n     * Max resolution tier can be used to control the maximum resolution_tier your asset is encoded, stored, and streamed at.\n     * @see {@link https://docs.mux.com/guides/stream-videos-in-4k}\n     * @defaultValue '1080p'\n     */\n    max_resolution_tier: z.enum(['2160p', '1440p', '1080p']).default('1080p'),\n\n    /**\n     * The video quality informs the cost, quality, and available platform features for the asset.\n     * @see {@link https://docs.mux.com/guides/use-video-quality-levels}\n     * @defaultValue 'plus'\n     */\n    video_quality: z.enum(['basic', 'plus']).default('plus'),\n\n    /**\n     * Whether or not to use signed URLs, making the asset private\n     * @see {@link https://docs.mux.com/guides/use-encoding-tiers}\n     * @defaultValue 'false'\n     */\n    signed: z.boolean().default(false),\n\n    autogenerated_captions_languages: z\n      .array(\n        z.object({\n          code: z.enum(SUPPORTED_MUX_LANGUAGES_VALUES as [SupportedMuxLanguage, ...SupportedMuxLanguage[]]),\n          isSourceLanguage: z.boolean().default(false),\n        })\n      )\n      .optional(),\n\n    custom_text_tracks: z.array(CustomTextTrack).optional(),\n\n    upload_type: z.enum(['file', 'url']).default('file'),\n  })\n  .transform((v) => {\n    if (v.video_quality === 'basic') {\n      return {\n        ...v,\n        max_resolution_tier: '1080p',\n        mp4_support: 'none',\n      } as typeof v;\n    }\n\n    return v;\n  });\n\nexport type RequestedUploadConfig = z.input<typeof UploadConfig>;\nexport type ParsedUploadConfig = z.infer<typeof UploadConfig>;\n\nexport const UploadData = z\n  .object({ title: z.string().min(1) })\n  .and(\n    z.discriminatedUnion('upload_type', [\n      z.object({ upload_type: z.literal('file'), file: z.custom<File>((value) => value instanceof File) }),\n      z.object({ upload_type: z.literal('url'), url: z.string().url() }),\n    ])\n  )\n  .and(UploadConfig);\n\nexport type RequestedUploadData = z.input<typeof UploadData>;\n\n/**\n * Used by `server/controllers/mux.ts` as that doesn't receive the file from the front-end.\n * Users upload the file directly from the browser via the presigned URL generated in `parseUploadRequest`.\n */\nexport const UploadDataWithoutFile = z\n  .object({ title: z.string().min(1) })\n  .and(\n    z.discriminatedUnion('upload_type', [\n      z.object({ upload_type: z.literal('file') }),\n      z.object({ upload_type: z.literal('url'), url: z.string().url() }),\n    ])\n  )\n  .and(UploadConfig);\n\nexport function uploadConfigToNewAssetInput(\n  config: ParsedUploadConfig,\n  storedTextTracks: StoredTextTrack[] = [],\n  url?: string\n): Mux.Video.Assets.AssetCreateParams.Input[] | undefined {\n  const inputs: Mux.Video.Assets.AssetCreateParams.Input[] = [];\n\n  const base: Mux.Video.Assets.AssetCreateParams.Input = {};\n\n  if (config.upload_type === 'url') {\n    base.url = url;\n  }\n\n  if (config.autogenerated_captions_languages) {\n    base.generated_subtitles = config.autogenerated_captions_languages.map((language) => {\n      const label = SUPPORTED_MUX_LANGUAGES.find((l) => l.code === language.code)?.label || language.code;\n      return {\n        language_code: language.code,\n        name: language.isSourceLanguage ? `${label} (CC)` : label,\n        type: 'text',\n        text_type: 'subtitles',\n        closed_captions: true,\n      };\n    });\n  }\n\n  if (Object.keys(base).length > 0) {\n    inputs.push(base);\n  }\n\n  if (storedTextTracks.length > 0) {\n    inputs.push(...storedTextTracks.map(storedTextTrackToMuxTrack));\n  }\n\n  return inputs.length > 0 ? inputs : undefined;\n}\n","import type Mux from '@mux/mux-node';\nimport { z } from 'zod';\nimport { getService } from '.';\nimport { ParsedCustomTextTrack, StoredTextTrack, TextTrackFile } from '../../../types/shared-types';\nimport { MuxAsset, MuxAssetUpdate } from '../content-types/mux-asset/types';\nimport { TEXT_TRACK_MODEL } from './types';\n\nconst pluginId = 'mux-video-uploader';\n\nexport async function storeTextTracks(custom_text_tracks: ParsedCustomTextTrack[]): Promise<StoredTextTrack[]> {\n  // @ts-expect-error - v5 migration\n  return await Promise.all(\n    custom_text_tracks.map(async (track) => {\n      const { id } = await strapi.entityService.create(TEXT_TRACK_MODEL, { data: track });\n\n      return { ...track, id };\n    })\n  );\n}\n\n// TODO - This export is used in a shared types file which is also referenced in admin.\n// Because of this, the BACKEND_URI doesn't ref correctly :-\\\nexport function storedTextTrackToMuxTrack(track: StoredTextTrack): Mux.Video.AssetCreateTrackParams {\n  return {\n    type: 'text',\n    text_type: 'subtitles',\n    closed_captions: track.closed_captions,\n    language_code: track.language_code,\n    name: track.closed_captions ? `${track.name} (CC)` : track.name,\n    url: getStrapiTextTrackUrl(track.id),\n  };\n}\n\nconst BACKEND_URI = strapi.config?.server.url;\n\nfunction getStrapiTextTrackUrl(id: StoredTextTrack['id']) {\n  return `${BACKEND_URI}/${pluginId}/mux-text-tracks/${id}`;\n}\n\nexport function getMuxTextTrackUrl({\n  playback_id,\n  track,\n  signedToken,\n}: {\n  playback_id: MuxAsset['playback_id'];\n  track: Pick<Mux.Video.Track, 'id'>;\n  signedToken?: string;\n}) {\n  return `https://stream.mux.com/${playback_id}/text/${track.id}.vtt${signedToken ? `?token=${signedToken}` : ''}`;\n}\n\n/**\n * Deletes, creates or updates (deleting & recreating) modified subtitles & captions.\n * Doesn't modify the `mux-asset`'s `asset_data` in the Strapi database (that's handled by Mux's webhook handlers).\n */\nexport async function updateTextTracks(\n  muxAsset: MuxAsset,\n  newTracks: MuxAssetUpdate['custom_text_tracks']\n): Promise<MuxAsset['asset_data'] | undefined> {\n  if (!newTracks || !muxAsset.asset_id || !muxAsset.playback_id) return undefined;\n\n  const { asset_id, playback_id } = muxAsset;\n\n  const { token } = await (async () => {\n    if (!muxAsset.signed) return { token: undefined };\n\n    return getService('mux').signPlaybackId(playback_id, 'video');\n  })();\n\n  /**\n   * #1 PARSE EXISTING, REMOVED, ADDED AND UPDATED TRACKS\n   */\n  const existingTracks = muxAsset.asset_data?.tracks || [];\n\n  const removedTracks =\n    existingTracks.filter(\n      (track) =>\n        track.type === 'text' &&\n        track.text_type === 'subtitles' &&\n        !newTracks.find((t) => t.stored_track?.id === track.id)\n    ) || [];\n\n  const addedTracks = newTracks.filter((track) => !existingTracks.find((t) => t.id === track.stored_track?.id));\n\n  const updatedTracks = newTracks.flatMap((track) => {\n    const existingTrack = existingTracks.find(\n      (t) => t.id === track.stored_track?.id && t.type === 'text' && t.text_type === 'subtitles'\n    );\n\n    if (!existingTrack) return [];\n\n    const isDifferent = [\n      existingTrack.language_code !== track.language_code,\n      existingTrack.name !== track.name,\n      // Ignore closed_captions for generated captions/subtitles\n      existingTrack.text_source !== 'generated_vod' && existingTrack.closed_captions !== track.closed_captions,\n      track.file?.contents,\n    ].some(Boolean);\n\n    if (!isDifferent) return [];\n\n    return {\n      track,\n      prevId: existingTrack.id,\n    };\n  });\n\n  /**\n   * #2 DOWNLOAD FILES FOR TRACKS ALREADY IN MUX\n   *\n   * For tracks that were updated but didn't include a new user-sent file,\n   * we can't point to a stored track in Strapi. Instead, we need to point to the\n   * track hosted in Mux itself.\n   **/\n  const alreadyInMuxWithoutFile = await Promise.all(\n    updatedTracks.flatMap((t) => {\n      const track_id = t.track.stored_track?.id;\n      // If not a stored track, ignore\n      if (t.track.file || !track_id) return [];\n\n      return new Promise<(typeof updatedTracks)[number]>(async (resolve, reject) => {\n        try {\n          const muxTrackRes = await fetch(\n            getMuxTextTrackUrl({ playback_id, track: { id: track_id }, signedToken: token })\n          );\n\n          if (muxTrackRes.status !== 200) throw new Error(muxTrackRes.statusText);\n\n          const contents = await muxTrackRes.text();\n          const type = muxTrackRes.headers.get('content-type') || 'text/vtt';\n\n          const contentLength = muxTrackRes.headers.get('content-length');\n\n          const file = TextTrackFile.parse({\n            contents,\n            type,\n            name: t.track.name,\n            size: contentLength && !Number.isNaN(Number(contentLength)) ? Number(contentLength) : contents.length,\n          } as z.input<typeof TextTrackFile>);\n\n          resolve({\n            ...t,\n            track: {\n              ...t.track,\n              file,\n            },\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    })\n  );\n\n  /**\n   * #3 STORE TRACKS IN STRAPI\n   *\n   * So Mux's services can fetch them via URL\n   */\n  const newStoredForDownload = await (async () => {\n    try {\n      return await storeTextTracks(\n        [...addedTracks, ...updatedTracks.map((t) => t.track), ...alreadyInMuxWithoutFile.map((t) => t.track)].filter(\n          (t) => t.file\n        ) as ParsedCustomTextTrack[]\n      );\n    } catch (error) {\n      console.error('\\n\\n[updateTextTracks / storeTextTracks]', error);\n      throw new Error('Unable to store text tracks');\n    }\n  })();\n\n  /**\n   * #4 DELETE EXISTING TRACKS IN MUX\n   *\n   * Although creating the new ones first would yield a better safety net,\n   * we delete first because Mux doesn't allow tracks with duplicate language codes.\n   */\n  await (async () => {\n    try {\n      await getService('mux').deleteAssetTextTracks(asset_id, [\n        ...removedTracks.flatMap((t) => t.id || []),\n        ...updatedTracks.flatMap((t) => t.prevId || []),\n      ]);\n    } catch (error) {\n      console.error('\\n\\n[updateTextTracks / deleteAssetTextTracks]', error);\n      throw new Error('Unable to delete text tracks in Mux');\n    }\n  })();\n\n  /**\n   * #5 CREATE TRACKS IN MUX\n   *\n   * Provide an URL so Mux's services can fetch them remotely.\n   */\n  await (async () => {\n    try {\n      await getService('mux').createAssetTextTracks(asset_id, newStoredForDownload.map(storedTextTrackToMuxTrack));\n    } catch (error) {\n      console.error('\\n\\n[updateTextTracks / createAssetTextTracks]', error);\n      throw new Error('Unable to create text tracks in Mux');\n    }\n  })();\n}\n","import { Context } from 'koa';\n\nimport { MuxAssetUpdate } from '../content-types/mux-asset/types';\nimport { resolveMuxAsset } from '../utils/resolve-mux-asset';\nimport { updateTextTracks } from '../utils/text-tracks';\nimport { ASSET_MODEL } from '../utils/types';\n\nconst search = (ctx: Context) => {\n  const params = ctx.query;\n\n  if (!params.sort) {\n    params.sort = 'createdAt';\n  }\n\n  if (!params.order) {\n    params.order = 'desc';\n  }\n\n  return strapi.documents(ASSET_MODEL).findMany(params);\n};\n\nconst find = async (ctx: Context) => {\n  const entities = await search(ctx);\n  const totalCount = await count(ctx);\n\n  const items = entities.map((entity: any) => entity);\n\n  return { items, totalCount };\n};\n\nconst findOne = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n\n  return await strapi.db.query(ASSET_MODEL).findOne({\n    where: { id: documentId },\n  });\n  // @ts-ignore - v5 migration\n  // return await strapi.documents(ASSET_MODEL).findOne({\n  //   documentId,\n  //   filters: ctx.query,\n  // });\n};\n\nconst count = (ctx: Context) => {\n  const params = ctx.query;\n\n  return strapi.documents(ASSET_MODEL).count(params);\n};\n\nconst create = async (ctx: Context) => {\n  const { body } = ctx.request.body;\n\n  return await strapi.documents(ASSET_MODEL).create({ data: body });\n};\n\nconst update = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n  const muxAsset = await resolveMuxAsset({ id: documentId });\n\n  const { title, custom_text_tracks } = <MuxAssetUpdate>ctx.request.body;\n\n  /** Let Mux's webhook handlers notify us of track changes */\n  await updateTextTracks(muxAsset, custom_text_tracks);\n\n  if (typeof title === 'string' && title) {\n    await strapi.db.query(ASSET_MODEL).update({\n      where: { id: documentId },\n      data: { title },\n    });\n    // @ts-ignore - v5 migration\n    // await strapi.documents(ASSET_MODEL).update({\n    //   documentId,\n    //   // @ts-expect-error - v5 migration\n    //   data: { title },\n    // });\n  }\n\n  return { ok: true };\n};\n\nconst del = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n\n  return await strapi.documents(ASSET_MODEL).delete(documentId);\n};\n\n/**\n * Get mux assets by asset ID\n */\nconst getByAssetId = async (ctx: Context) => {\n  const { assetId } = ctx.params;\n\n  if (!assetId) {\n    return ctx.badRequest('Asset ID is required');\n  }\n\n  return await strapi.db.query(ASSET_MODEL).findOne({\n    where: { asset_id: assetId },\n  });\n};\n\n/**\n * Get mux asset by playback ID\n */\nconst getByPlaybackId = async (ctx: Context) => {\n  const { playbackId } = ctx.params;\n\n  if (!playbackId) {\n    return ctx.badRequest('Playback ID is required');\n  }\n\n  return await strapi.db.query(ASSET_MODEL).findOne({\n    where: { playback_id: playbackId },\n  });\n};\n\nexport default {\n  find,\n  findOne,\n  count,\n  create,\n  update,\n  del,\n  getByAssetId,\n  getByPlaybackId,\n};\n","import { Context } from 'koa';\nimport { ZodType, Schema, infer as ZodInfer } from 'zod';\n\ninterface ParsedRequest<\n  BodySchema extends ZodType<any>,\n  ParamsSchema extends ZodType<any>,\n  QuerySchema extends ZodType<any>,\n> {\n  body?: ZodInfer<BodySchema>;\n  params?: ZodInfer<ParamsSchema>;\n  query?: ZodInfer<QuerySchema>;\n}\n\nexport function parseRequest<BS extends ZodType<any>, PS extends ZodType<any>, QS extends ZodType<any>>(\n  ctx: Context,\n  bodySchema: BS | null,\n  paramsSchema: PS | null,\n  querySchema: QS | null\n): ParsedRequest<BS, PS, QS> {\n  let bodyObject;\n\n  try {\n    const requestBody = ctx.request.body;\n    bodyObject = requestBody && typeof requestBody === 'object' ? requestBody : JSON.parse(requestBody);\n  } catch (error) {\n    // ctx.badRequest's type seems to be off - we're following the official example: https://docs.strapi.io/dev-docs/error-handling#controllers-and-middlewares\n    (ctx as any).badRequest('InvalidBody', { errors: { body: 'invalid body' } });\n    throw new Error('invalid-body');\n  }\n\n  const body = bodySchema?.safeParse(bodyObject);\n  const params = paramsSchema?.safeParse(ctx.params);\n  const query = querySchema?.safeParse(ctx.query);\n\n  if (body && (!body.success || 'error' in body)) {\n    const errorMsg =\n      'error' in body && typeof body.error === 'object' && body.error && 'message' in body.error\n        ? (body.error.message as string)\n        : 'invalid-body';\n\n    (ctx as any).badRequest('ValidationError', {\n      errors: {\n        body: errorMsg,\n      },\n    });\n\n    throw new Error(errorMsg);\n  }\n\n  if (params && (!params.success || 'error' in params)) {\n    const errorMsg =\n      'error' in params && typeof params.error === 'object' && params.error && 'message' in params.error\n        ? (params.error.message as string)\n        : 'invalid-params';\n\n    (ctx as any).badRequest('ValidationError', {\n      errors: {\n        params: errorMsg,\n      },\n    });\n\n    throw new Error(errorMsg);\n  }\n\n  if (query && (!query.success || 'error' in query)) {\n    const errorMsg =\n      'error' in query && typeof query.error === 'object' && query.error && 'message' in query.error\n        ? (query.error.message as string)\n        : 'invalid-query';\n\n    (ctx as any).badRequest('ValidationError', {\n      errors: {\n        query: errorMsg,\n      },\n    });\n\n    throw new Error(errorMsg);\n  }\n\n  return {\n    body: body?.data,\n    params: params?.data,\n    query: query?.data,\n  };\n}\n","import axios from 'axios';\nimport { Context } from 'koa';\nimport { z } from 'zod';\n\nimport { StoredTextTrack, UploadConfig, UploadDataWithoutFile } from '../../../types/shared-types';\nimport { Config, getService } from '../utils';\nimport { parseRequest } from '../utils/parse-json-body';\nimport { resolveMuxAsset } from '../utils/resolve-mux-asset';\nimport { storeTextTracks } from '../utils/text-tracks';\nimport { ASSET_MODEL, TEXT_TRACK_MODEL } from '../utils/types';\n\nconst processWebhookEvent = async (webhookEvent: any) => {\n  const { type, data } = webhookEvent;\n\n  switch (type) {\n    case 'video.upload.asset_created': {\n      const muxAsset = await resolveMuxAsset({ upload_id: data.id });\n      return [\n        muxAsset.id,\n        {\n          data: { asset_id: data.asset_id },\n        },\n      ] as const;\n    }\n    case 'video.asset.ready': {\n      const muxAsset = await resolveMuxAsset({ asset_id: data.id });\n      return [\n        muxAsset.id,\n        {\n          data: {\n            playback_id: data.playback_ids[0].id,\n            duration: data.duration,\n            aspect_ratio: data.aspect_ratio,\n            isReady: true,\n            asset_data: data,\n          },\n        },\n      ] as const;\n    }\n    case 'video.upload.errored': {\n      const muxAsset = await resolveMuxAsset({ upload_id: data.id });\n      return [\n        muxAsset.id,\n        {\n          data: {\n            error_message: `There was an unexpected error during upload`,\n          },\n        },\n      ] as const;\n    }\n    case 'video.asset.errored': {\n      const muxAsset = await resolveMuxAsset({ asset_id: data.id });\n      return [\n        muxAsset.id,\n        {\n          data: {\n            error_message: `${data.errors.type}: ${data.errors.messages[0] || ''}`,\n          },\n        },\n      ] as const;\n    }\n    default:\n      return undefined;\n  }\n};\n\n/**\n * Get a thumbnail from a video\n * @docs https://www.mux.com/docs/guides/get-images-from-a-video\n * @param {string} documentId - The ID of the video to get the thumbnail from\n * @param {string} token - The token to use to get the thumbnail\n * @param {string} time - The time of the thumbnail to get\n * @param {string} width - The width of the thumbnail to get\n * @param {string} height - The height of the thumbnail to get\n * @param {string} rotate - The rotation of the thumbnail to get\n * @param {string} fit_mode - The fit mode of the thumbnail to get\n * @param {string} flip_v - The flip vertical of the thumbnail to get\n * @param {string} flip_h - The flip horizontal of the thumbnail to get\n * @param {string} format - The format of the thumbnail to get\n */\nconst thumbnail = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n  const { token, time, width, height, rotate, fit_mode, flip_v, flip_h, format = 'jpg' } = ctx.query;\n\n  let imageUrl = `https://image.mux.com/${documentId}/thumbnail.${format}`;\n\n  const queryParams = new URLSearchParams();\n\n  // Add token if provided\n  if (token) {\n    queryParams.append('token', token as string);\n  }\n\n  // Add optional parameters if provided\n  if (time !== undefined) {\n    queryParams.append('time', time as string);\n  }\n\n  if (width !== undefined) {\n    queryParams.append('width', width as string);\n  }\n\n  if (height !== undefined) {\n    queryParams.append('height', height as string);\n  }\n\n  if (rotate !== undefined) {\n    queryParams.append('rotate', rotate as string);\n  }\n\n  if (fit_mode !== undefined) {\n    queryParams.append('fit_mode', fit_mode as string);\n  }\n\n  if (flip_v !== undefined) {\n    queryParams.append('flip_v', flip_v as string);\n  }\n\n  if (flip_h !== undefined) {\n    queryParams.append('flip_h', flip_h as string);\n  }\n\n  // Append query parameters if any exist\n  const queryString = queryParams.toString();\n  if (queryString) {\n    imageUrl += `?${queryString}`;\n  }\n\n  const response = await axios.get(imageUrl, {\n    responseType: 'stream',\n  });\n\n  // Set the appropriate content type based on requested format\n  const contentType = `image/${format}`;\n\n  ctx.response.set('content-type', contentType);\n  ctx.body = response.data;\n};\n\n/**\n * Get a storyboard from a video\n * @docs https://www.mux.com/docs/guides/player-advanced-usage#custom-storyboards\n * @param {string} documentId - The ID of the video to get the storyboard from\n * @param {string} token - The token to use to get the storyboard\n * @param {string} format - The format of the storyboard to get\n * @returns {Promise<void>}\n */\nconst storyboard = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n  const { token, format = 'webp' } = ctx.query;\n\n  // Determine the file extension based on the path parameter\n  const extension = ctx.path.endsWith('.json') ? 'json' : 'vtt';\n\n  // Build the base URL\n  let imageUrl = `https://image.mux.com/${documentId}/storyboard.${extension}`;\n\n  // Build query parameters\n  const queryParams = new URLSearchParams();\n\n  // Add format parameter (defaults to webp if not specified)\n  queryParams.append('format', format as string);\n\n  // Add token if provided\n  if (token) {\n    queryParams.append('token', token as string);\n  }\n\n  // Append all query parameters\n  imageUrl += `?${queryParams.toString()}`;\n\n  const response = await axios.get(imageUrl, {\n    responseType: 'stream',\n  });\n\n  // Set the appropriate content type based on the requested extension\n  const contentType = `application/${extension}`;\n  ctx.response.set('content-type', contentType);\n  ctx.body = response.data;\n};\n\n/**\n * Get an animated GIF or WebP from a video\n * @docs https://www.mux.com/docs/guides/get-images-from-a-video#get-an-animated-gif-from-a-video\n * @param {string} documentId - The ID of the video to get the animated GIF or WebP from\n * @param {string} token - The token to use to get the animated GIF or WebP\n * @param {string} start - The start time of the animated GIF or WebP\n * @param {string} end - The end time of the animated GIF or WebP\n * @param {string} width - The width of the animated GIF or WebP\n * @param {string} height - The height of the animated GIF or WebP\n */\nconst animated = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n  const { token, start, end, width, height, fps, format = 'gif' } = ctx.query;\n\n  // Build the base URL\n  let imageUrl = `https://image.mux.com/${documentId}/animated.${format}`;\n\n  // Build query parameters\n  const queryParams = new URLSearchParams();\n\n  // Add optional parameters if provided\n  if (start !== undefined) {\n    queryParams.append('start', start as string);\n  }\n\n  if (end !== undefined) {\n    queryParams.append('end', end as string);\n  }\n\n  if (width !== undefined) {\n    queryParams.append('width', width as string);\n  }\n\n  if (height !== undefined) {\n    queryParams.append('height', height as string);\n  }\n\n  if (fps !== undefined) {\n    queryParams.append('fps', fps as string);\n  }\n\n  // Add token if provided\n  if (token) {\n    queryParams.append('token', token as string);\n  }\n\n  // Append query parameters if any exist\n  const queryString = queryParams.toString();\n  if (queryString) {\n    imageUrl += `?${queryString}`;\n  }\n\n  const response = await axios.get(imageUrl, {\n    responseType: 'stream',\n  });\n\n  // Set the appropriate content type based on the requested format\n  const contentType = `image/${format}`;\n  ctx.response.set('content-type', contentType);\n  ctx.body = response.data;\n};\n\nasync function parseUploadRequest(ctx: Context) {\n  const params = parseRequest(ctx, UploadDataWithoutFile, null, null);\n\n  const config = UploadConfig.safeParse(params.body);\n\n  if (!config.success) {\n    throw new Error(config.error.message);\n  }\n\n  const { custom_text_tracks = [] } = config.data;\n\n  const storedTextTracks = await storeTextTracks(custom_text_tracks);\n\n  return {\n    storedTextTracks,\n    config: config.data,\n    params,\n  };\n}\n\nconst postDirectUpload = async (ctx: Context) => {\n  const { config, storedTextTracks, params } = await parseUploadRequest(ctx);\n\n  const result = await getService('mux').getDirectUploadUrl({\n    config,\n    storedTextTracks,\n    corsOrigin: ctx.request.header.origin,\n  });\n\n  const data = {\n    title: params.body?.title || '',\n    upload_id: result.id,\n    ...config,\n  };\n\n  await strapi.documents(ASSET_MODEL).create({ data });\n\n  ctx.send(result);\n};\n\nconst postRemoteUpload = async (ctx: Context) => {\n  const { config, storedTextTracks, params } = await parseUploadRequest(ctx);\n\n  if (params.body?.upload_type !== 'url' || !params.body.url) {\n    // ctx.badRequest's type seems to be off - we're following the official example: https://docs.strapi.io/dev-docs/error-handling#controllers-and-middlewares\n    (ctx as any).badRequest('ValidationError', { errors: { url: ['url cannot be empty'] } });\n\n    return;\n  }\n\n  const result = await getService('mux').createRemoteAsset({ config, storedTextTracks, url: params.body.url });\n\n  const data = {\n    asset_id: result.id,\n    title: params.body?.title || '',\n    url: params.body.url,\n    ...config,\n  };\n\n  await strapi.documents(ASSET_MODEL).create({ data });\n\n  ctx.send(result);\n};\n\nconst deleteMuxAsset = async (ctx: Context) => {\n  const { params, query } = parseRequest(\n    ctx,\n    null,\n    z.object({ documentId: z.string().or(z.number()) }),\n    z.object({ delete_on_mux: z.string().or(z.boolean()).default(true) })\n  );\n\n  // Ensure that the mux-asset entry exists for the id\n  // @ts-ignore - v5 migration\n  // const muxAsset = await strapi.documents(ASSET_MODEL).findOne(documentId);\n  const muxAsset = await strapi.db.query(ASSET_MODEL).findOne({ where: { id: params.documentId } });\n\n  if (!muxAsset) {\n    ctx.notFound('mux-asset.notFound');\n\n    return;\n  }\n\n  // Delete mux-asset entry\n  // @ts-ignore - v5 migration\n  // const deleteRes = await strapi.documents(ASSET_MODEL).delete(params.documentId);\n  const deleteRes = await strapi.db.query(ASSET_MODEL).delete({ where: { id: params.documentId } });\n  if (!deleteRes) {\n    ctx.send({ success: false });\n    return;\n  }\n\n  // @ts-ignore - v5 migration\n  const { asset_id, upload_id } = deleteRes;\n  const result = { success: true, deletedOnMux: false };\n\n  // If the directive exists deleting the Asset from Mux\n  if (query.delete_on_mux) {\n    try {\n      // Resolve the asset_id\n      // - Use the asset_id that was available on the deleted mux-asset entry\n      // - Else, resolve it from Mux using the upload_id\n      const assetId = asset_id !== '' ? asset_id : (await getService('mux').getAssetByUploadId(upload_id)).id;\n\n      const deletedOnMux = await getService('mux').deleteAsset(assetId);\n\n      result.deletedOnMux = deletedOnMux;\n    } catch (err) {}\n  }\n\n  ctx.send(result);\n};\n\nconst muxWebhookHandler = async (ctx: Context) => {\n  const body = ctx.request.body;\n  const sigHttpHeader = ctx.request.headers['mux-signature'];\n\n  const config = await Config.getConfig();\n\n  if (\n    sigHttpHeader === undefined ||\n    sigHttpHeader === '' ||\n    (Array.isArray(sigHttpHeader) && sigHttpHeader.length < 0)\n  ) {\n    ctx.throw(401, 'Webhook signature is missing');\n  }\n\n  if (Array.isArray(sigHttpHeader) && sigHttpHeader.length > 1) {\n    ctx.throw(401, 'we have an unexpected amount of signatures');\n  }\n\n  let sig;\n\n  if (Array.isArray(sigHttpHeader)) {\n    sig = sigHttpHeader[0];\n  } else {\n    sig = sigHttpHeader;\n  }\n\n  // TODO: Currently commented out because we should be using the raw request body for verfiying\n  // Webhook signatures, NOT JSON.stringify.  Strapi does not currently allow for access to the\n  // Koa.js request (the middleware used for parsing requests).\n\n  // let isSigValid;\n\n  // try {\n  //   isSigValid = Webhooks.verifyHeader(JSON.stringify(body), sig, config.webhook_signing_secret);\n  // } catch(err) {\n  //   ctx.throw(403, err);\n\n  //   return;\n  // }\n\n  const outcome = await processWebhookEvent(body);\n\n  if (outcome === undefined) {\n    ctx.send('ignored');\n  } else {\n    const [id, params] = outcome;\n\n    const result = await strapi.db.query(ASSET_MODEL).update({\n      where: { id },\n      data: params.data,\n    });\n\n    ctx.send(result);\n  }\n};\n\nconst signMuxPlaybackId = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n  const { type } = ctx.query;\n\n  const result = await getService('mux').signPlaybackId(documentId, type as string);\n\n  ctx.send(result);\n};\n\n/**\n * Returns a text track stored in Strapi so Mux can download and parse it as an asset's subtitle/captions\n * For custom text tracks only.\n * @docs https://docs.mux.com/guides/add-subtitles-to-your-videos\n **/\nconst textTrack = async (ctx: Context) => {\n  const { documentId } = ctx.params;\n\n  // @ts-ignore - v5 migration\n  // const track = (await strapi.documents(TEXT_TRACK_MODEL).findOne(documentId)) as StoredTextTrack | undefined;\n  const track = (await strapi.db.query(TEXT_TRACK_MODEL).findOne(documentId)) as StoredTextTrack | undefined;\n\n  if (!track) {\n    ctx.notFound('mux-text-track.notFound');\n\n    return;\n  }\n\n  const contentType = `${track.file.type}; charset=utf-8`;\n  ctx.set({ 'Content-Type': contentType, 'Content-Disposition': `attachment; filename=${track.file.name}` });\n  ctx.type = `${track.file.type}; charset=utf-8`;\n  ctx.body = track.file.contents;\n};\n\nexport default {\n  postDirectUpload,\n  postRemoteUpload,\n  deleteMuxAsset,\n  muxWebhookHandler,\n  thumbnail,\n  storyboard,\n  signMuxPlaybackId,\n  textTrack,\n  animated,\n};\n","import { Context } from 'koa';\n\nimport { Config } from '../utils';\n\nconst isConfigured = async (ctx: Context) => {\n  const { accessTokenId, secretKey, webhookSigningSecret } = await Config.getConfig();\n\n  if (!accessTokenId) ctx.send(false);\n  else if (!secretKey) ctx.send(false);\n  else if (!webhookSigningSecret) ctx.send(false);\n  else ctx.send(true);\n};\n\nexport default { isConfigured };\n","import muxAsset from './mux-asset';\nimport mux from './mux';\nimport muxSettings from './mux-settings';\n\nexport default {\n  'mux-asset': muxAsset,\n  mux,\n  'mux-settings': muxSettings,\n};\n","export default {};\n","export default {};\n","const routes = [\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/direct-upload',\n    handler: 'mux.postDirectUpload',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/remote-upload',\n    handler: 'mux.postRemoteUpload',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux.deleteMuxAsset',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/webhook-handler',\n    handler: 'mux.muxWebhookHandler',\n    config: {\n      auth: false,\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/thumbnail/:documentId',\n    handler: 'mux.thumbnail',\n    config: {\n      auth: false,\n      prefix: false,\n      description: 'Proxies thumbnail requests to load correctly within the Strapi Admin Dashboard',\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/storyboard/:documentId',\n    handler: 'mux.storyboard',\n    config: {\n      auth: false,\n      prefix: false,\n      description: 'Proxies storyboard requests to load correctly within the Strapi Admin Dashboard',\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/sign/:documentId',\n    handler: 'mux.signMuxPlaybackId',\n    config: {\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-text-tracks/:documentId',\n    handler: 'mux.textTrack',\n    config: {\n      policies: [],\n      prefix: false,\n      auth: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset',\n    handler: 'mux-asset.find',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/count',\n    handler: 'mux-asset.count',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux-asset.findOne',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/asset/:assetId',\n    handler: 'mux-asset.getByAssetId',\n    config: {\n      policies: [],\n      prefix: false,\n      description: 'Get mux assets by asset ID',\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/playback/:playbackId',\n    handler: 'mux-asset.getByPlaybackId',\n    config: {\n      policies: [],\n      prefix: false,\n      description: 'Get mux asset by playback ID',\n    },\n  },\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/mux-asset',\n    handler: 'mux-asset.create',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux-asset.update',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux-asset.del',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-settings',\n    handler: 'mux-settings.isConfigured',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n];\n\nexport default routes;\n","const routes = [\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/direct-upload',\n    handler: 'mux.postDirectUpload',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/remote-upload',\n    handler: 'mux.postRemoteUpload',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux.deleteMuxAsset',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/webhook-handler',\n    handler: 'mux.muxWebhookHandler',\n    config: {\n      auth: false,\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/thumbnail/:documentId',\n    handler: 'mux.thumbnail',\n    config: {\n      auth: false,\n      prefix: false,\n      description: 'Proxies thumbnail requests to load correctly within the Strapi Admin Dashboard',\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/storyboard/:documentId',\n    handler: 'mux.storyboard',\n    config: {\n      auth: false,\n      prefix: false,\n      description: 'Proxies storyboard requests to load correctly within the Strapi Admin Dashboard',\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/animated/:documentId',\n    handler: 'mux.animated',\n    config: {\n      auth: false,\n      prefix: false,\n      description: 'Proxies animated requests to load correctly within the Strapi Admin Dashboard',\n    },\n  },\n  {\n    handler: 'mux.signMuxPlaybackId',\n    config: {\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-text-tracks/:documentId',\n    handler: 'mux.textTrack',\n    config: {\n      policies: [],\n      prefix: false,\n      auth: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset',\n    handler: 'mux-asset.find',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/count',\n    handler: 'mux-asset.count',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux-asset.findOne',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/asset/:assetId',\n    handler: 'mux-asset.getByAssetId',\n    config: {\n      policies: [],\n      prefix: false,\n      description: 'Get mux assets by asset ID',\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-asset/playback/:playbackId',\n    handler: 'mux-asset.getByPlaybackId',\n    config: {\n      policies: [],\n      prefix: false,\n      description: 'Get mux asset by playback ID',\n    },\n  },\n  {\n    method: 'POST',\n    path: '/mux-video-uploader/mux-asset',\n    handler: 'mux-asset.create',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux-asset.update',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/mux-video-uploader/mux-asset/:documentId',\n    handler: 'mux-asset.del',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n  {\n    method: 'GET',\n    path: '/mux-video-uploader/mux-settings',\n    handler: 'mux-settings.isConfigured',\n    config: {\n      policies: [],\n      prefix: false,\n    },\n  },\n];\n\nexport default routes;\n","import adminRoutes from './admin';\nimport clientRoutes from './client';\n\nconst routes = {\n  admin: {\n    type: 'admin',\n    routes: adminRoutes,\n  },\n  'content-api': {\n    type: 'content-api',\n    routes: clientRoutes,\n  },\n};\n\nexport default routes;\n","import Mux from '@mux/mux-node';\n\nimport { ParsedUploadConfig, StoredTextTrack, uploadConfigToNewAssetInput } from '../../../types/shared-types';\nimport pluginPkg from '../../../package.json';\nimport { Config } from '../utils';\n\nexport interface UploadRequestConfig {\n  /**\n   * Enable static renditions by setting this to 'standard'. Can be overwritten on a per-asset basis.\n   * @see {@link https://docs.mux.com/guides/video/enable-static-mp4-renditions#why-enable-mp4-support}\n   * @defaultValue 'none'\n   */\n  mp4_support?: 'none' | 'standard';\n\n  /**\n   * Max resolution tier can be used to control the maximum resolution_tier your asset is encoded, stored, and streamed at.\n   * @see {@link https://docs.mux.com/guides/stream-videos-in-4k}\n   * @defaultValue '1080p'\n   */\n  max_resolution_tier?: '2160p' | '1440p' | '1080p';\n\n  /**\n   * The encoding tier informs the cost, quality, and available platform features for the asset.\n   * @see {@link https://docs.mux.com/guides/use-encoding-tiers}\n   * @defaultValue 'smart'\n   */\n  encoding_tier?: 'baseline' | 'smart';\n\n  signed?: 'true' | 'false';\n}\n\nconst getMuxClient = async () => {\n  const { accessTokenId, secretKey } = await Config.getConfig();\n\n  return new Mux({\n    tokenId: accessTokenId,\n    tokenSecret: secretKey,\n    defaultHeaders: {\n      'x-source-platform': `Strapi CMS | ${pluginPkg.version}`,\n    },\n  });\n};\n\nconst muxService = () => ({\n  async getAssetById(assetId: string) {\n    const { video } = await getMuxClient();\n\n    return await video.assets.retrieve(assetId);\n  },\n\n  async getAssetByUploadId(uploadId: string) {\n    const { video } = await getMuxClient();\n\n    const assets = await video.assets.list({ upload_id: uploadId });\n\n    return assets.data[0];\n  },\n\n  async getDirectUploadUrl({\n    config,\n    storedTextTracks = [],\n    corsOrigin = '*',\n  }: {\n    config: ParsedUploadConfig;\n    storedTextTracks: StoredTextTrack[];\n    corsOrigin?: string;\n  }): Promise<Mux.Video.Uploads.Upload> {\n    const { video } = await getMuxClient();\n\n    // @TODO - This is a workaround until Mux releases an update to their node SDK\n    // which adds the updated `video_quality` parameter\n    const encodingTier = config.video_quality === 'basic' ? 'baseline' : 'smart';\n\n    return video.uploads.create({\n      cors_origin: corsOrigin,\n      new_asset_settings: {\n        input: uploadConfigToNewAssetInput(config, storedTextTracks),\n        playback_policy: [config.signed ? 'signed' : 'public'],\n        mp4_support: config.mp4_support,\n        encoding_tier: encodingTier,\n        max_resolution_tier: config.max_resolution_tier,\n      },\n    });\n  },\n\n  async createRemoteAsset({\n    url,\n    config,\n    storedTextTracks,\n  }: {\n    url: string;\n    storedTextTracks: StoredTextTrack[];\n    config: ParsedUploadConfig;\n  }) {\n    const { video } = await getMuxClient();\n\n    // @TODO - This is a workaround until Mux releases an update to their node SDK\n    // which adds the updated `video_quality` parameter\n    const encodingTier = config.video_quality === 'basic' ? 'baseline' : 'smart';\n\n    return video.assets.create({\n      input: uploadConfigToNewAssetInput(config, storedTextTracks, url) || [],\n      playback_policy: [config.signed ? 'signed' : 'public'],\n      mp4_support: config.mp4_support,\n      encoding_tier: encodingTier,\n      max_resolution_tier: config.max_resolution_tier,\n    });\n  },\n\n  async deleteAsset(assetId: string) {\n    const { video } = await getMuxClient();\n\n    await video.assets.delete(assetId);\n\n    return true;\n  },\n\n  async signPlaybackId(playbackId: string, type: string) {\n    const { jwt } = await getMuxClient();\n    const { playbackSigningSecret, playbackSigningId } = await Config.getConfig();\n\n    let baseOptions = {\n      keyId: playbackSigningId,\n      keySecret: playbackSigningSecret,\n      expiration: type === 'video' ? '1d' : '1m',\n    };\n\n    let params = { width: type === 'thumbnail' ? '512' : '' };\n\n    const token = await jwt.signPlaybackId(playbackId, {\n      ...baseOptions,\n      // @ts-expect-error This `type` type isn't properly exposed by the Mux SDK\n      type,\n      params,\n    });\n\n    return { token };\n  },\n\n  async createAssetTextTracks(assetId: string, tracks: Mux.Video.Assets.AssetCreateTrackParams[]) {\n    const { video } = await getMuxClient();\n\n    return await Promise.all(tracks.map((track) => video.assets.createTrack(assetId, track)));\n  },\n\n  async deleteAssetTextTracks(assetId: string, trackIds: string[]) {\n    const { video } = await getMuxClient();\n\n    return await Promise.all(trackIds.map((id) => video.assets.deleteTrack(assetId, id)));\n  },\n});\n\nexport default muxService;\n\nexport type MuxService = ReturnType<typeof muxService>;\n","import mux from './mux';\n\nexport default {\n  mux,\n};\n","/**\n * Application methods\n */\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport register from './register';\n\n/**\n * Plugin server methods\n */\nimport config from './config';\nimport contentTypes from './content-types';\nimport controllers from './controllers';\nimport middlewares from './middlewares';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\n\nexport default {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n"],"names":["strapi","config","muxAsset","pluginId","name","type","Config.getConfig","routes","adminRoutes","clientRoutes","mux"],"mappings":"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"}