declare const _default: {
    mux: () => {
        getAssetById(assetId: string): Promise<import("@mux/mux-node/resources/video/assets").Asset>;
        getAssetByUploadId(uploadId: string): Promise<import("@mux/mux-node/resources/video/assets").Asset>;
        getDirectUploadUrl({ config, storedTextTracks, corsOrigin, }: {
            config: {
                mp4_support?: "none" | "standard";
                max_resolution_tier?: "2160p" | "1440p" | "1080p";
                video_quality?: "basic" | "plus";
                signed?: boolean;
                autogenerated_captions_languages?: {
                    code?: "en" | "es" | "it" | "pt" | "de" | "fr" | "pl" | "ru" | "nl" | "ca" | "tr" | "sv" | "uk" | "no" | "fi" | "sk" | "el" | "cs" | "hr" | "da" | "ro" | "bg";
                    isSourceLanguage?: boolean;
                }[];
                custom_text_tracks?: {
                    name?: string;
                    file?: {
                        type?: string;
                        contents?: string;
                        name?: string;
                        size?: number;
                    };
                    language_code?: string;
                    closed_captions?: boolean;
                    stored_track?: import("@mux/mux-node/resources/video/assets").Track;
                }[];
                upload_type?: "file" | "url";
            };
            storedTextTracks: import("../../../types/shared-types").StoredTextTrack[];
            corsOrigin?: string;
        }): Promise<import("@mux/mux-node/resources/video/uploads").Upload>;
        createRemoteAsset({ url, config, storedTextTracks, }: {
            url: string;
            storedTextTracks: import("../../../types/shared-types").StoredTextTrack[];
            config: {
                mp4_support?: "none" | "standard";
                max_resolution_tier?: "2160p" | "1440p" | "1080p";
                video_quality?: "basic" | "plus";
                signed?: boolean;
                autogenerated_captions_languages?: {
                    code?: "en" | "es" | "it" | "pt" | "de" | "fr" | "pl" | "ru" | "nl" | "ca" | "tr" | "sv" | "uk" | "no" | "fi" | "sk" | "el" | "cs" | "hr" | "da" | "ro" | "bg";
                    isSourceLanguage?: boolean;
                }[];
                custom_text_tracks?: {
                    name?: string;
                    file?: {
                        type?: string;
                        contents?: string;
                        name?: string;
                        size?: number;
                    };
                    language_code?: string;
                    closed_captions?: boolean;
                    stored_track?: import("@mux/mux-node/resources/video/assets").Track;
                }[];
                upload_type?: "file" | "url";
            };
        }): Promise<import("@mux/mux-node/resources/video/assets").Asset>;
        deleteAsset(assetId: string): Promise<boolean>;
        signPlaybackId(playbackId: string, type: string): Promise<{
            token: string;
        }>;
        createAssetTextTracks(assetId: string, tracks: import("@mux/mux-node/resources/video/assets").AssetCreateTrackParams[]): Promise<import("@mux/mux-node/resources/video/assets").Track[]>;
        deleteAssetTextTracks(assetId: string, trackIds: string[]): Promise<void[]>;
    };
};
export default _default;
